from collections import deque

import sys
input = sys.stdin.readline

n = int(input())
maps = [ list(map(int,input().split())) for _ in range(n)]

d = [[1,0],[0,1]] 

queue = deque()
queue.append([0,0])

flag = False

while(queue):
    r, c = queue.popleft()
    
    if(maps[r][c] == -1):
        flag = True
        break
    # r,c는 현재위치 
    move = maps[r][c] #현재위치에서 무조건 이동해야하는 칸수

    for i in range(2):
        dr = r+ d[i][0] * move
        dc = c+ d[i][1] * move
        
        if(0>dr or dr >= n or 0>dc or dc >= n):
            continue
        
        queue.append([dr,dc])


if flag: print("HaruHaru")
else : print("Hing")

BFS문제
문제
‘쩰리’는 점프하는 것을 좋아하는 젤리다. 단순히 점프하는 것에 지루함을 느낀 ‘쩰리’는 새로운 점프 게임을 해보고 싶어 한다. 새로운 점프 게임의 조건은 다음과 같다.

‘쩰리’는 가로와 세로의 칸 수가 같은 정사각형의 구역 내부에서만 움직일 수 있다. ‘쩰리’가 정사각형 구역의 외부로 나가는 경우엔 바닥으로 떨어져 즉시 게임에서 패배하게 된다.
‘쩰리’의 출발점은 항상 정사각형의 가장 왼쪽, 가장 위의 칸이다. 다른 출발점에서는 출발하지 않는다.
‘쩰리’가 이동 가능한 방향은 오른쪽과 아래 뿐이다. 위쪽과 왼쪽으로는 이동할 수 없다.
‘쩰리’가 가장 오른쪽, 가장 아래 칸에 도달하는 순간, 그 즉시 ‘쩰리’의 승리로 게임은 종료된다.
‘쩰리’가 한 번에 이동할 수 있는 칸의 수는, 현재 밟고 있는 칸에 쓰여 있는 수 만큼이다. 칸에 쓰여 있는 수 초과나 그 미만으로 이동할 수 없다.

1. n의 입력값 크기의 정사각형 리스트를 만든다. 

2. 두 방향만으로 이동할 수 있기 때문에 d = [[1,0],[0,1]]를 넣었다.

3. 리스트에서 r, c를 빼고 해당 위치가 현재 쩰리가 위치한 존재라고 했을때, 해당위치의 값이 -1인지 체크

4. 현재 위치에서 무조건 이동해야 하기 때문에 move를 곱해 이동할 값 만들기.

5. -1에 도달할  수 있다면 HaruHaru, 도달하지 못한다면 Hing 출력

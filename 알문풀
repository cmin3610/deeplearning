import sys
sys.setrecursionlimit(10000)

M, N, K = map(int, sys.stdin.readline().split())

field = [[0 for _ in range(N)] for _ in range(M)] 

for _ in range(K):
    X1, Y1, X2, Y2 = map(int, sys.stdin.readline().split())
    for Y in range(Y1, Y2):
        for X in range(X1, X2):
            field[Y][X] = 1

def dfs(x, y, count):
    field[y][x] = 1
    for dx, dy in d:
        X, Y = x + dx, y + dy
        if (0 <= X < N) and (0 <= Y < M) and field[Y][X] == 0:
            count = dfs(X, Y, count+1)
    
    return count

area = []
d = [(0, 1), (0, -1), (1, 0), (-1, 0)]

for Y in range(M):
    for X in range(N):
        if field[Y][X] == 0:
            area.append(dfs(X, Y, count=1))

print(len(area))
print(*sorted(area))


DFS 문제.
문제
눈금의 간격이 1인 M×N(M,N≤100)크기의 모눈종이가 있다. 이 모눈종이 위에 눈금에 맞추어 K개의 직사각형을 그릴 때, 이들 K개의 직사각형의 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어진다.
예를 들어 M=5, N=7 인 모눈종이 위에 <그림 1>과 같이 직사각형 3개를 그렸다면, 그 나머지 영역은 <그림 2>와 같이 3개의 분리된 영역으로 나누어지게 된다.

1. 재귀 횟수 설정, M, N, K를 입력받고 M*N 크기의 직사각형 리스트 만들기

2. 직사각형의 범위를 1로 만든다.

3. N*M 직사각형을 전부 돌면서, 분리된 영역을 찾고, DFS 함수를 호출해준다.

4. 이미 방문한 영역을 표시하기 위해 1로 할당. 리스트의 영역을 넘지 않고 0이 값으로 할당된 경우 dfs 함수를 다시 호출해 count에 저장.
count를 변환해줌으로서 호출된 횟수 구하기

5. 분리된 직사각형의 수와 분리된 직사각형의 크기를 출력.
